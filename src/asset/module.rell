module;

import main: ^.main;

enum action_type {
    MINT,
    TRANSFER,
    UPDATE_METADATA,
}

entity asset {
    id: byte_array;
    key id;
    name: text;
    issuer: main.core.account.address;
    meta_data: text; // IPFS URL
    mutable owner: main.core.account.address;
}

entity history {
    owner: main.core.account.address;
    asset: asset;
    to: main.core.account.address;
    action: action_type;
    created_time: timestamp = op_context.last_block_time;
    block_height: integer = op_context.block_height;
    transaction: transaction = op_context.transaction;
}

operation mintAsset(name: text, serialId: byte_array, metaCID: text, minter: byte_array) {
    val mintDetail = main.core.account.checkAddress(minter);
    require(mintDetail.addrMeta.role == main.core.account.roles.AUO,
        main.logSpace.title + "[Only minters can mint assets]"
    );
    require(serialId.size() > 24, main.logSpace.title + '[]');
    
    val assetData = create asset(
        id = serialId,
        name = name,
        issuer = mintDetail.address,
        meta_data = metaCID,
        owner = mintDetail.address
    );

    create history(
        owner = mintDetail.address,
        asset = assetData,
        to = mintDetail.address,
        action = action_type.MINT
    );
 }

operation batchMintAssets(names: list<text>, serialIds: list<text>, metaCIDs: list<text>, minter: byte_array) {
    op_context.is_signer(minter);

    val minterDetail = main.core.account.checkAddress(minter);
    require(minterDetail.addrMeta.role == main.core.account.roles.AUO,
        main.logSpace.title + "[Only minters can mint assets]"
    );
    require(names.size() == metaCIDs.size() 
        and names.size() == serialIds.size(),
        main.logSpace.title + "[Name and meta_data array lengths do not match]"
    );

    for (i in range(names.size())) {
        val assetData = create asset (
            id = serialIds[i].to_bytes(),
            name = names[i],
            issuer = minterDetail.address,
            meta_data = metaCIDs[i],
            owner = minterDetail.address
        );
        create history (
            owner = minterDetail.address,
            asset = assetData,
            to = minterDetail.address,
            action = action_type.MINT
        );
    };
}

operation transferAsset(assetId: byte_array, operator: byte_array, from: byte_array, to: byte_array) {
    op_context.is_signer(operator);

    val operatorDetail = main.core.account.checkAddress(operator);
    require(operatorDetail.addrMeta.role != main.core.account.roles.WALLET,
        main.logSpace.title + '[The WALLET role does not have operation permissions]'
    );

    val fromDetail = main.core.account.checkAddress(from);
    val toDetail = main.core.account.checkAddress(to);
    require(asset @? {.id == assetId, .owner == fromDetail.address } != null,
        main.logSpace.title + "[Asset ID " + assetId.to_hex() + " not owned by " + fromDetail.address.id.to_hex() + "]"
    );

    val assetData = asset @ { .id == assetId, .owner == fromDetail.address };
    update assetData ( .owner = toDetail.address );

    create history (
        owner = fromDetail.address,
        asset = assetData,
        to = toDetail.address,
        action = action_type.TRANSFER
    );   
}

operation batchTransfer(assetIds: list<byte_array>, operator: byte_array, from: byte_array, to: byte_array) {
    op_context.is_signer(operator);

    val operatorDetail = main.core.account.checkAddress(operator);
    require(operatorDetail.addrMeta.role != main.core.account.roles.WALLET,
        main.logSpace.title + '[The WALLET role does not have operation permissions]'
    );

    val fromDetail = main.core.account.checkAddress(from);
    val toDetail = main.core.account.checkAddress(to);
    for (assetId in assetIds) {
        log('assetId:', assetId.to_hex());
        require(asset @? { .id == assetId, .owner == fromDetail.address } != null,
            main.logSpace.title + "[assetId: " + assetId.to_hex() + "not found]"
        );

        val assetData = asset @ { .id == assetId, .owner == fromDetail.address };
        update assetData ( .owner = toDetail.address );
        create history (
            owner = fromDetail.address,
            asset = assetData,
            to = toDetail.address,
            action = action_type.TRANSFER
        );  
    };
}

query getAssetByAddress(address: byte_array) {
    val addrDetail = main.core.account.checkAddress(address);
    return asset @* { .owner == addrDetail.address } (
        id = .id,
        name = .name,
        issuer = .issuer.id,
        metaData = .meta_data,
        owner = .owner.id
    ).to_gtv_pretty();
}

query getAssetById(assetId: byte_array) {
    log('assetId: ', assetId);
    val assetDetail = asset @ { .id == assetId };
    return history@ { .asset == assetDetail, .action == action_type.MINT } (
        id = assetDetail.id,
        name = assetDetail.name,
        issuer = assetDetail.issuer.id,
        metaData = assetDetail.meta_data,
        owner = assetDetail.owner.id,
        createdTime = .created_time,
        blockHeight = .block_height,
        blockRid = .transaction.block.block_rid,
        txRid = .transaction.tx_rid
    ).to_gtv_pretty();
}

query getAssetMeta(assetId: byte_array) {
    return asset@ { .id == assetId } (
        metaData = .meta_data
    ).to_gtv_pretty();
}

query getHistoryByAddress(address: byte_array) {
    val addrDetail = main.core.account.checkAddress(address);
    return history@*{ .owner == addrDetail.address } (
        owner = .owner.id,
        asset = .asset.id,
        to = .to.id,
        action = .action,
        createdTime = .created_time,
        blockHeight = .block_height,
        blockRid = .transaction.block.block_rid,
        txRid = .transaction.tx_rid
    ).to_gtv_pretty();
}

query getHistoryByAssetId(assetId: byte_array) { // Return only the history of the asset.
    return history@*{ .asset.id == assetId } (
        owner = .owner.id,
        asset = .asset.id,
        to = .to.id,
        action = .action,
        createdTime = .created_time,
        blockHeight = .block_height,
        blockRid = .transaction.block.block_rid,
        txRid = .transaction.tx_rid
    ).to_gtv_pretty();
}



